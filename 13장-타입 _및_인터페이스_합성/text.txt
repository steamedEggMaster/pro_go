1. Go는 클래스가 없기에 생성자도 없음
   관례는 New<Type>으로 메서드를 생성해주는것
   생성자 메서드를 강제하지는 않음
   => Export 하지 않을 경우 리터럴 문법 사용

2.  Go에서는 임베디드 타입의 필드 접근 방식에 2가지가 잇음
	// 1. 임베디드 타입 접근 후 탐색
	// 2. 임베디드 필드 타입 직접 접근
    // fmt.Println(b.Product.Name, b.Name)
    //                1번 방식       2번 방식

	// 2번 방식을 사용하는 것 : "필드 승격"
	// => Go가 타입을 "평면화"시켜
	//    Boat가 Product의 필드 가진것처럼 수행

	// 임베디드 필드 타입에 따라 메서드 평면화가 수행됨
	// 1. Product와 같은 값인 경우
	//    : 리시버가 *Product or Product 전부 가져옴
	// 2. *Product와 같은 포인터인 경우
	//    : 리시버가 *Product 포인터만 가져옴

3. 승격 수행 불가한 상황
   : 인클로징 타입에 동일한 이름으로 정의한 필드 or 메서드 없는 것만 승격됨
   	
    // specialdeal.go 파일의 GetDetails()의 
    // deal.Price(0)가 문제가 되는데,
	// 순서를 정리해보자
	// 1. SpecialDeal.price가 정의되어
	//    Product.price는 승격하지 못한 상태
	//    => 외부에서 .price 접근 시 SpecialDeal.price이 가져와짐
	// 2. Product.Price는 승격되어
	//    deal.Price로 접근이 되는 상태.
	// 3. 하지만,
	//    deal.Price 내부에서는 SpecialDeal.price가 아닌,
	//    Product.price 값을 사용중임.
	// => 사용하는 변수가 다르다는 문제점 발생!!
	//
	// 이를 해결하기 위해,
	// 아래와 같이 수정하여 명확히 해주는 것이 좋다.
	// deal.Product.Price(0)

	// 만약, SpecialDeal.price를 사용하는 Price 함수를 사용해야한다면
	// 인클로징 타입에서 동일한 함수를 만들어야 한다.

3-1. 만약 2개의 임베디드 타입을 가지고 있고,
     2개다 동일한 이름의 메서드가 있으며,
     그 메서드를 인클로징 타입에서 사용하려하면,
     => 구별하지 못하는 에러 발생함