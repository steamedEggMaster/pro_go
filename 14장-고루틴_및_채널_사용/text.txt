1. 모든 Go 프로그램은 적어도 하나의 고루틴을 사용
   main 함수 진입점에서 명령문 실행을 시작하는 고루틴 생성
   main 고루틴은 한번에 하나의 명령문을 실행해 경로를 따라 동기적으로 코드 동작

2. Go 런타임은 모든 고루틴을 블로킹한 경우, 프로그램 종료
   -> 활성 고루틴이 없음을 감지하고 애플리케이션 종료
   fatal error: all goroutines are asleep - deadlock!

   -> 이에 대한 해결책으로 
      1. close(channel)과 for { if details, open := <-dispatchChannel; open {} }
      2. for details := range dispatchChannel

3. 채널의 방향 제한
   1. chan<-
      - 예시 : channel chan<- DispatchNotification 이 의미하는것
              : channel은 어떠한 대상이 아니고, 채널은 실체가 없는 통로일 뿐임
                => 채널로 보내는 것만 가능하다.
                => 채널이 우측이 입구고, 좌측이 출구일때
                   채널로 들어가는 우측 입구만 활성화된다.
                   => 즉, notification := <-channel과 같은 좌측 출구에 관한 내용이 들어가선 안된다.
    
              => 해당 함수 외부에서 channel := make(chan DispatchNotification)을 만들고
                 넘긴 것이기에, 외부에서는 notification := <-channel 과 같은 출구 연산이 가능하다.
   2. <-chan
      : 반대로 출구 연산만 가능하다
    
   3. 하지만 주고 받는 객체를 나누지 않으면 명확한 구분이 힘들기 때문에
      1. 변수로 만들기
	  // var sendOnlyChannel chan<- DispatchNotification = dispatchChannel
	  // var receiveOnlyChannel <-chan DispatchNotification = dispatchChannel
      // go DispatchOrders(sendOnlyChannel) // 보낼 수만 있는
	  // receiveDispatches(receiveOnlyChannel) // 받을 수만 있는
      
      2. 명시적 형변환
	  // go DispatchOrders(chan<- DispatchNotification(dispatchChannel))
	  // receiveDispatches((<-chan DispatchNotification)(dispatchChannel))
      
      처리하면 더 명확하다.