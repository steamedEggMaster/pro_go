##### 테스팅 사용
- 단위테스트는 이름이 Test로 시작하고, 
  그 뒤에 대문자로 시작하는 용어가 오는 함수로 표현
  ex) TestSum(t *testing.T)
- _test 접미사를 붙인 패키지에서 단위테스트 작성 시
  exported 기능만 접근 가능해짐

1. 테스트 결과 보고를 위한 testing 패키지의 *testing.T 메서드
   t.Log(vals ...interface{})                     : 테스트 중간에 로그 출력(일반 출력)
                                                    - "go test -v" 옵션을 주면 출력됨
    .Logf(template string, vals ...interface{})   : 포맷 로그 출력
    .Fail()                                       : 테스트를 실패 상태로 표시하되, 실행은 계속 진행
                                                    - 주로 조건 검사 후, 테스트 멈추고 싶지 않을 때 사용
    .FailNow()                                    : 실패로 표시하고, 테스트 함수 종료 
    .Failed() bool                                : 테스트가 현재 실행까지 한번이라도 실패했는지 여부 반환
    .Error(vals ...interface{})                   : 로그 출력 후 실패 상태로 표시 (Log() + Fail())
    .Errorf(template string, vals ...interface{}) : 포맷 지정 로그 출력 후 실패 상태로 표시 (Logf() + Fail())
    .Fatal(vals ...interface{})                   : 로그 출력 후 테스트 함수 종료 (Log() + FailNow())
    .Fatal(template string, vals ...interface{})  : 포맷 로그 출력 후 테스트 함수 종료 (Logf() + FailNow())

2. 단위 테스트 실행
   go test
   go test -v
   go test -v -run "정규식"

3. 테스트 실행 관리를 위한 *testing.T 메서드
   t.Run(name string, f func(t *testing.T) bool) : f테스트 함수를 받아 하위 테스트 실행
                                                   - bool : 테스트 성공했는지 여부
                                                   - 해당 함수 실행동안 상위 테스트는 블로킹됨
    .SkipNow()                                   : 현재 테스트 중단 후 Skipped 상태로 표시
                                                   - 에러 or 실패 ❌
    .Skip(args ...interface{})                   : t.Log() + SkipNow()
    .Skip(template string, args ...interface{})  : t.Logf() + SkipNow()
    .Skipped() bool                              : 현재 테스트가 스킵되었는지 여부
                                                   - 주로 t.Run() 에서 후속 처리 판단 시 사용됨


##### 코드 벤치마킹
- 벤치마킹은 이름이 Benchmark로 시작하고, 
  그 뒤에 대문자로 시작하는 용어가 오는 함수로 표현
  ex) BenchmarkSort(b *testing.B)


1. *testing.B 구조체가 정의한 필드
   b.N int : 벤치마크 함수 내에서 반복 실해할 횟수
             - 실행 시 Go 런타임이 정확한 측정을 위해 자동 설정
               => for문으로 벤치마크 코드를 감싸는 형태

2. 타이머 제어를 위한 *testing.B 메서드
   b.StopTimer()  : 벤치마크 시간 측정 일시 중지
                    - 주로 테스트 셋업 시간을 측정 시간에 포함하지 않게 하기위함
    .StartTimer() : 시간 측정 다시 시작
                    - StopTimer()와 짝으로 주로 사용됨
    .ResetTimer() : 타이머와 내부 카운터 초기화
                    - b.N 루프 전, 측정을 정확히 처음부터 다시 하고싶을 때 사용

3. 서브 벤치마크 실행을 위한 *testing.B 메서드
   b.Run(name string, f func(b *testing.B)) bool : b함수를 받아 하위 벤치마크 실행
                                                   - name : 하위 벤치마크 이름
                                                   - bool : 하위 벤치마크 성공했는지 여부
                                                   - 해당 함수 실행동안 상위 벤치마크는 블로킹됨


##### 데이터 로깅
1. log 패키지의 유용 함수
   log.Output()                 :
      .SetOutput(w io.Writer)   : 로그를 출력할 대상(출력 스트림) 설정
                                  - 기본 : os.Stderr
      .Flags() int              : 현재 설정된 로그 출력 형식 정보 반환
      .SetFlags(Flag int)       : 출력 형식 설정
                                  - 2번에서 나오는 플래그를 | 연산자로 조합하여 인수로 넘김
      .Prefix() string          : 현재 설정된 접두사 반환
      .SetPrefix(prefix string) : 각 로그 앞에 출력할 접두사 지정
      .Output(depth int, message string) errror     : 내부 함수 건너뛰고 정확한 로그 위치 표시 시 사용
                                                      - depth : 호출 스택 깊이
                                                                - 1     : 직접 호출
                                                                - 2 이상 : 중간 래퍼 건너뜀
      .Print(vals ...interface{})                   : fmt.Sprint 호출하여 로그 메시지 생성 후, 결과를 Output()에 전달하여 로그 출력
      .Printf(template string, vals ...interface{}) :    .Sprintf                   ''
      .Fatalf(vals ...interface{})                  :    .Sprint                    ''                                 후 애플리케이션 종료
      .Fatalf(template string, vals ...interface{}) :    .Sprintf                   ''                                      ''
      .Panic(vals ...interface{})                   :    .Sprint                    ''                  전달 후 panic()에 전달
      .Panicf(tamplate string, vals ...interface{}) :    .Sprintf                   ''                         ''

2. SetFlags()에 사용되는 log 패키지 상수
   log.Ldate         : 로그에 날짜 출력
      .Ltime         :  ''  시간 출력
      .Lmicroseconds :  ''  마이크로초 포함
      .Llongfile     :  ''  디렉터리를 포함한 코드 파일 이름 및 메시지를 기록한 줄 번호 포함
      .Lshortfile    :  ''    ''    제외한                  ''
      .LUTC          :  ''  날짜 및 시간에 현지 시간대 대신, UTC 기준 시간 사용
      .Lmsgprefix    : log.SetPrefix()로 설정한 Prefix를 로그 메시지 앞이 아닌 뒤에 붙이게 함
                       ex) 기본 : [PREFIX] 2025/06/16 메시지
                           옵션 사용 시: 2025/06/16 [PREFIX] 메시지
      .LstdFlags     : Ldata | Ltime

3. 커스텀 로깅을 위한 log 패키지 함수
   log.New(w io.Writer, prefix string, flags int) *log.Logger
   : 지정한 접두사 및 플래그로 w에 로그를 작성하는 Logger 반환
   - 서버, 모듈, 로그 레벨별로 분리된 로거 만들때 유용