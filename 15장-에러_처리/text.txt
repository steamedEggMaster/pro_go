1. Go는 error라는 미리 정의된 인터페이스 제공
   // type error interface {
   //   Error() string
   // }

2. 에러 편의 함수
   1. errors.New()
      : 표준 라이브러리의 일부인 errors 패키지는
        내용이 문자열인 에러를 반환하는 New() 제공
        => 간단한 에러 처리 가능

   2. fmt.Errorf()
      : 복잡한 세부 정보를 문자열로 생성 가능 

3. 패닉 처리
   panic() : 함수 실행 중지 및 모든 defer 함수 실행 및 종료

4. 패닉 복구
   recover() : defer로 호출되는 함수 안에서 동작해야함
               => panic()이 불리면 모든 defer를 부르기에 복구함수(recover)도 부르게됨
   - panic() 함수에는 어떤 값도 들어갈 수 있기 때문에 매개변수가 interface{}임
     => recover의 반환값도 interface{}가됨
     => 내부 값을 사용하기 위해선 타입 단언을 해야함 
        - err, ok := arg.(error)
   
4-1. 패닉 복구 후 재패닉
     err, ok := arg.(error) 의 err을 사용하여 다시 panic(err) 호출하기


