###### 문자열
1. 문자열 = 바이트 배열
	// 여기서 문제 발생!!
	// 모든 문자가 1byte로 표현되지 못함
	// => 해당 문자가 차지하는 byte 개수만큼
	//    len(string)이 보이는 개수보다 증가함

###### 배열
1. 배열은 변수 대입 시 복사됨 -> 다른 주소갑을 가짐
   &를 통해 같은 주소값 참조 가능

2. 배열은 동일한 타입, 동일한 순서, 동일한 값을 포함 시 일치하다고 봄

###### 슬라이스
1. 슬라이스 : 배열 0번 포인터 + 배열 길이 + 용량이 담긴 구조체
   type slice struct {
       pointer *T // 실제 배열의 시작 주소
       length  int // high - low
       capacity int // max - low
   }

2. append() 사용 시 새로운 슬라이스가 반환되는 이유
   1. 배열을 바라보기에 배열의 capacity가 충분하면 해당 배열에 추가되어 그 값들을 바라보는 새로운 슬라이스가 반환됨
      => 이 경우, 기존 슬라이스와 같은 배열을 바라보지만,
         기존 슬라이스는 새로운 배열 요소가 매핑되어 있지 않음
         => 하지만, 
            기존 슬라이스가 바라보는 배열 요소를 수정할 경우,
            새로운 슬라이스에도 영향이 감
      
      1-1. 배열에서 [:]를 통해 슬라이스를 만든 후,
           슬라이스 크기가 작은 쪽에서 append를 수행할 경우,
           슬라이스 큰쪽이 바라보던 배열의 값이 변경되는 영향 발생
           - p192~p193 참고
   
   2. 배열의 capacity가 부족한 경우,
      => 새로운 배열을 만들고 그것을 바라보는 슬라이스를 생성하여 반환함


3. 	용량 설정하기
	slice4 := make([]string, 3, 6)
	// 3 : 만들어진 슬라이스가 바라 볼 수 있는 배열의 크기
	// 6 : append()로 추가되어 다른 슬라이스가 바라 볼 수 있는 크기
	//     기본값으로 설정되어 있음
	// => 배열이 새로 생성되지 않고 각각의 슬라이스가 바라보는 값들이 달라짐
	// p 187 그림 참고

4. 배열 to 슬라이스 : 배열[LowIndex : HighIndex]
                 - LowIndex ~ HighIndex - 1 까지 담긴 슬라이스 반환

5. max를 통해 Capacity를 지정하는 이유
	: 지정하지 않았을 때, append를 수행하면 원본 배열의 공간을 사용함
	  지정하면, Cap이 남아있으면 원본 배열의 공간을
	               남지 않았으면 새로운 배열을 만들어서 반환함
	=> 원본 배열에서 얼마나 공간을 사용 가능한지를 명시하는 역할!!

6. copy(destination, source)
	1. 슬라이스 크기는 상관없음 -> 끝에 도달할때까지만 넣어버림
	2. 용량이 남아 있더라도 바라보는 부분까지만 넣어버림

7. sort.~ 으로 슬라이스를 정렬 시
   원본 배열이 정렬되는 것임

8. 슬라이스는 nil과만 비교 가능
   => 슬라이스 간 비교 연산자 사용 시 에러 발생

####### 맵
1. 맵은 없는 키를 호출하면 기본값을 반환함!!
   v, ok := map[키] 형태로 사용할것

2. 맵 삭제는 delete(map, key)